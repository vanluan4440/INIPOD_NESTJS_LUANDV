// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  avatar    String?
  isActive  Boolean  @default(true)
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  favoritePokemons UserPokemon[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model Pokemon {
  id         String   @id @default(cuid())
  name       String
  type1      String
  type2      String?
  total      Int
  hp         Int
  attack     Int
  defense    Int
  spAttack   Int
  spDefense  Int
  speed      Int
  generation Int
  legendary  Boolean  @default(false)
  image      String
  ytbUrl     String

  // Relations
  favoritedBy UserPokemon[]

  @@map("pokemons")
}

model UserPokemon {
  id        String   @id @default(cuid())
  userId    String
  pokemonId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  pokemon Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)

  @@unique([userId, pokemonId])
  @@map("user_pokemons")
}
